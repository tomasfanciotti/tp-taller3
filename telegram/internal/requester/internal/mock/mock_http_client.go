// Code generated by MockGen. DO NOT EDIT.
// Source: requester.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockhttpClienter is a mock of httpClienter interface.
type MockhttpClienter struct {
	ctrl     *gomock.Controller
	recorder *MockhttpClienterMockRecorder
}

// MockhttpClienterMockRecorder is the mock recorder for MockhttpClienter.
type MockhttpClienterMockRecorder struct {
	mock *MockhttpClienter
}

// NewMockhttpClienter creates a new mock instance.
func NewMockhttpClienter(ctrl *gomock.Controller) *MockhttpClienter {
	mock := &MockhttpClienter{ctrl: ctrl}
	mock.recorder = &MockhttpClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpClienter) EXPECT() *MockhttpClienterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockhttpClienter) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockhttpClienterMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockhttpClienter)(nil).Do), req)
}
