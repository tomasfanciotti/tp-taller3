// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/app/services/pet_place.go
//
// Generated by this command:
//
//	mockgen -source cmd/app/services/pet_place.go -destination cmd/app/services/pet_place_mock.go
//
// Package mock_services is a generated GoMock package.
package services

import (
	"petplace/back-mascotas/src/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPetService is a mock of PetService interface.
type MockPetService struct {
	ctrl     *gomock.Controller
	recorder *MockPetServiceMockRecorder
}

// MockPetServiceMockRecorder is the mock recorder for MockPetService.
type MockPetServiceMockRecorder struct {
	mock *MockPetService
}

// NewMockPetService creates a new mock instance.
func NewMockPetService(ctrl *gomock.Controller) *MockPetService {
	mock := &MockPetService{ctrl: ctrl}
	mock.recorder = &MockPetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetService) EXPECT() *MockPetServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPetService) Delete(petID int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", petID)
}

// Delete indicates an expected call of Delete.
func (mr *MockPetServiceMockRecorder) Delete(petID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetService)(nil).Delete), petID)
}

// Edit mocks base method.
func (m *MockPetService) Edit(petID int, pet model.Pet) (model.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", petID, pet)
	ret0, _ := ret[0].(model.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Edit indicates an expected call of Edit.
func (mr *MockPetServiceMockRecorder) Edit(petID, pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockPetService)(nil).Edit), petID, pet)
}

// Get mocks base method.
func (m *MockPetService) Get(petID int) (model.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", petID)
	ret0, _ := ret[0].(model.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPetServiceMockRecorder) Get(petID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPetService)(nil).Get), petID)
}

// GetPetsByOwner mocks base method.
func (m *MockPetService) GetPetsByOwner(request model.SearchRequest) (model.SearchResponse[model.Pet], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetsByOwner", request)
	ret0, _ := ret[0].(model.SearchResponse[model.Pet])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetsByOwner indicates an expected call of GetPetsByOwner.
func (mr *MockPetServiceMockRecorder) GetPetsByOwner(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetsByOwner", reflect.TypeOf((*MockPetService)(nil).GetPetsByOwner), request)
}

// New mocks base method.
func (m *MockPetService) New(pet model.Pet) (model.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", pet)
	ret0, _ := ret[0].(model.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockPetServiceMockRecorder) New(pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockPetService)(nil).New), pet)
}
